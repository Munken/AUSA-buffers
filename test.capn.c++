// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test.capn

#include "test.capn.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<94> b_d6d9e1f25222dc68 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    104, 220,  34,  82, 242, 225, 217, 214,
     10,   0,   0,   0,   1,   0,   1,   0,
    119, 206,  55, 213, 128, 127, 105, 138,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110,  58,  80, 101, 114, 115, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    198, 199, 143, 238,  49,  52, 239, 213,
      1,   0,   0,   0,  98,   0,   0,   0,
     80, 104, 111, 110, 101,  78, 117, 109,
     98, 101, 114,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    207, 160,   0,  73,  59,  21, 161, 201,
    157,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 109,  97, 105, 108,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 104, 111, 110, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198, 199, 143, 238,  49,  52, 239, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 109, 112, 108, 111, 121, 109, 101,
    110, 116,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6d9e1f25222dc68 = b_d6d9e1f25222dc68.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d6d9e1f25222dc68[] = {
  &s_c9a1153b4900a0cf,
  &s_d5ef3431ee8fc7c6,
};
static const uint16_t m_d6d9e1f25222dc68[] = {2, 4, 0, 1, 3};
static const uint16_t i_d6d9e1f25222dc68[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_d6d9e1f25222dc68 = {
  0xd6d9e1f25222dc68, b_d6d9e1f25222dc68.words, 94, d_d6d9e1f25222dc68, m_d6d9e1f25222dc68,
  2, 5, i_d6d9e1f25222dc68, nullptr, nullptr, { &s_d6d9e1f25222dc68, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_d5ef3431ee8fc7c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 199, 143, 238,  49,  52, 239, 213,
     17,   0,   0,   0,   1,   0,   1,   0,
    104, 220,  34,  82, 242, 225, 217, 214,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110,  58,  80, 101, 114, 115, 111, 110,
     46,  80, 104, 111, 110, 101,  78, 117,
    109,  98, 101, 114,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    249,  50, 118, 209, 108,  24,  59, 183,
      1,   0,   0,   0,  42,   0,   0,   0,
     84, 121, 112, 101,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  98, 101, 114,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    249,  50, 118, 209, 108,  24,  59, 183,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d5ef3431ee8fc7c6 = b_d5ef3431ee8fc7c6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d5ef3431ee8fc7c6[] = {
  &s_b73b186cd17632f9,
};
static const uint16_t m_d5ef3431ee8fc7c6[] = {0, 1};
static const uint16_t i_d5ef3431ee8fc7c6[] = {0, 1};
const ::capnp::_::RawSchema s_d5ef3431ee8fc7c6 = {
  0xd5ef3431ee8fc7c6, b_d5ef3431ee8fc7c6.words, 51, d_d5ef3431ee8fc7c6, m_d5ef3431ee8fc7c6,
  1, 2, i_d5ef3431ee8fc7c6, nullptr, nullptr, { &s_d5ef3431ee8fc7c6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_b73b186cd17632f9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    249,  50, 118, 209, 108,  24,  59, 183,
     29,   0,   0,   0,   2,   0,   0,   0,
    198, 199, 143, 238,  49,  52, 239, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110,  58,  80, 101, 114, 115, 111, 110,
     46,  80, 104, 111, 110, 101,  78, 117,
    109,  98, 101, 114,  46,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111,  98, 105, 108, 101,   0,   0,
    104, 111, 109, 101,   0,   0,   0,   0,
    119, 111, 114, 107,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b73b186cd17632f9 = b_b73b186cd17632f9.words;
#if !CAPNP_LITE
static const uint16_t m_b73b186cd17632f9[] = {1, 0, 2};
const ::capnp::_::RawSchema s_b73b186cd17632f9 = {
  0xb73b186cd17632f9, b_b73b186cd17632f9.words, 31, nullptr, m_b73b186cd17632f9,
  0, 3, nullptr, nullptr, nullptr, { &s_b73b186cd17632f9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Type_b73b186cd17632f9, b73b186cd17632f9);
static const ::capnp::_::AlignedData<80> b_c9a1153b4900a0cf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 160,   0,  73,  59,  21, 161, 201,
     17,   0,   0,   0,   1,   0,   1,   0,
    104, 220,  34,  82, 242, 225, 217, 214,
      4,   0,   7,   0,   1,   0,   4,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110,  58,  80, 101, 114, 115, 111, 110,
     46, 101, 109, 112, 108, 111, 121, 109,
    101, 110, 116,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   3,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   3,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 101, 109, 112, 108, 111, 121,
    101, 100,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 109, 112, 108, 111, 121, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 111, 111, 108,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 108, 102,  69, 109, 112, 108,
    111, 121, 101, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c9a1153b4900a0cf = b_c9a1153b4900a0cf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c9a1153b4900a0cf[] = {
  &s_d6d9e1f25222dc68,
};
static const uint16_t m_c9a1153b4900a0cf[] = {1, 2, 3, 0};
static const uint16_t i_c9a1153b4900a0cf[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_c9a1153b4900a0cf = {
  0xc9a1153b4900a0cf, b_c9a1153b4900a0cf.words, 80, d_c9a1153b4900a0cf, m_c9a1153b4900a0cf,
  1, 4, i_c9a1153b4900a0cf, nullptr, nullptr, { &s_c9a1153b4900a0cf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_cb1810c5a0988d43 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     67, 141, 152, 160, 197,  16,  24, 203,
     10,   0,   0,   0,   1,   0,   0,   0,
    119, 206,  55, 213, 128, 127, 105, 138,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  46,  99,  97, 112,
    110,  58,  65, 100, 100, 114, 101, 115,
    115,  66, 111, 111, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    112, 101, 111, 112, 108, 101,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    104, 220,  34,  82, 242, 225, 217, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cb1810c5a0988d43 = b_cb1810c5a0988d43.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cb1810c5a0988d43[] = {
  &s_d6d9e1f25222dc68,
};
static const uint16_t m_cb1810c5a0988d43[] = {0};
static const uint16_t i_cb1810c5a0988d43[] = {0};
const ::capnp::_::RawSchema s_cb1810c5a0988d43 = {
  0xcb1810c5a0988d43, b_cb1810c5a0988d43.words, 36, d_cb1810c5a0988d43, m_cb1810c5a0988d43,
  1, 1, i_cb1810c5a0988d43, nullptr, nullptr, { &s_cb1810c5a0988d43, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace foo {
namespace bar {
namespace baz {

// Person
#ifndef _MSC_VER
constexpr uint16_t Person::_capnpPrivate::dataWordSize;
constexpr uint16_t Person::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Person::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Person::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Person::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Person::PhoneNumber
#ifndef _MSC_VER
constexpr uint16_t Person::PhoneNumber::_capnpPrivate::dataWordSize;
constexpr uint16_t Person::PhoneNumber::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Person::PhoneNumber::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Person::PhoneNumber::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Person::PhoneNumber::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Person::Employment
#ifndef _MSC_VER
constexpr uint16_t Person::Employment::_capnpPrivate::dataWordSize;
constexpr uint16_t Person::Employment::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Person::Employment::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Person::Employment::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Person::Employment::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// AddressBook
#ifndef _MSC_VER
constexpr uint16_t AddressBook::_capnpPrivate::dataWordSize;
constexpr uint16_t AddressBook::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind AddressBook::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AddressBook::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* AddressBook::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

