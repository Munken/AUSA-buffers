// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: PackedEvent.capn

#ifndef CAPNP_INCLUDED_d8bd5b35dc752245_
#define CAPNP_INCLUDED_d8bd5b35dc752245_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f0b3161389798dea);
CAPNP_DECLARE_SCHEMA(9efa7df5578f49f2);

}  // namespace schemas
}  // namespace capnp


struct PackedEvent {
  PackedEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0b3161389798dea, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9efa7df5578f49f2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PackedEvent::Reader {
public:
  typedef PackedEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMul() const;
  inline  ::capnp::List< ::uint8_t>::Reader getMul() const;

  inline bool hasData() const;
  inline  ::capnp::List< ::Data>::Reader getData() const;

  inline bool hasSignal() const;
  inline  ::capnp::List< ::uint32_t>::Reader getSignal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PackedEvent::Builder {
public:
  typedef PackedEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMul();
  inline  ::capnp::List< ::uint8_t>::Builder getMul();
  inline void setMul( ::capnp::List< ::uint8_t>::Reader value);
  inline void setMul(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initMul(unsigned int size);
  inline void adoptMul(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownMul();

  inline bool hasData();
  inline  ::capnp::List< ::Data>::Builder getData();
  inline void setData( ::capnp::List< ::Data>::Reader value);
  inline  ::capnp::List< ::Data>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::Data>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Data>> disownData();

  inline bool hasSignal();
  inline  ::capnp::List< ::uint32_t>::Builder getSignal();
  inline void setSignal( ::capnp::List< ::uint32_t>::Reader value);
  inline void setSignal(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initSignal(unsigned int size);
  inline void adoptSignal(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownSignal();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PackedEvent::Pipeline {
public:
  typedef PackedEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Data::Reader {
public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getEnergy() const;

  inline  ::uint8_t getStrip() const;

  inline  ::uint16_t getTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Data::Builder {
public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getEnergy();
  inline void setEnergy(float value);

  inline  ::uint8_t getStrip();
  inline void setStrip( ::uint8_t value);

  inline  ::uint16_t getTime();
  inline void setTime( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Data::Pipeline {
public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PackedEvent::Reader::hasMul() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PackedEvent::Builder::hasMul() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t>::Reader PackedEvent::Reader::getMul() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t>::Builder PackedEvent::Builder::getMul() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PackedEvent::Builder::setMul( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void PackedEvent::Builder::setMul(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t>::Builder PackedEvent::Builder::initMul(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void PackedEvent::Builder::adoptMul(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> PackedEvent::Builder::disownMul() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool PackedEvent::Reader::hasData() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool PackedEvent::Builder::hasData() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Data>::Reader PackedEvent::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Data>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Data>::Builder PackedEvent::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Data>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void PackedEvent::Builder::setData( ::capnp::List< ::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Data>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Data>::Builder PackedEvent::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Data>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void PackedEvent::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Data>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Data>> PackedEvent::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Data>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool PackedEvent::Reader::hasSignal() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool PackedEvent::Builder::hasSignal() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader PackedEvent::Reader::getSignal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder PackedEvent::Builder::getSignal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void PackedEvent::Builder::setSignal( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void PackedEvent::Builder::setSignal(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder PackedEvent::Builder::initSignal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void PackedEvent::Builder::adoptSignal(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> PackedEvent::Builder::disownSignal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline float Data::Reader::getEnergy() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Data::Builder::getEnergy() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Data::Builder::setEnergy(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Data::Reader::getStrip() const {
  return _reader.getDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint8_t Data::Builder::getStrip() {
  return _builder.getDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS);
}
inline void Data::Builder::setStrip( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Data::Reader::getTime() const {
  return _reader.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Data::Builder::getTime() {
  return _builder.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Data::Builder::setTime( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_d8bd5b35dc752245_
