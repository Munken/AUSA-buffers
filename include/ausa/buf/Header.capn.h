// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Header.capn

#ifndef CAPNP_INCLUDED_dcd603dc2a8c780f_
#define CAPNP_INCLUDED_dcd603dc2a8c780f_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d62916903572d8d8);
CAPNP_DECLARE_SCHEMA(a18ef4a38d13d7e4);
CAPNP_DECLARE_SCHEMA(9c31ea5edbec71e5);
CAPNP_DECLARE_SCHEMA(cf4244bb5449f267);

}  // namespace schemas
}  // namespace capnp

namespace AUSA {
namespace protobuf {

struct Header {
  Header() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d62916903572d8d8, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DoubleSided {
  DoubleSided() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a18ef4a38d13d7e4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SingleSided {
  SingleSided() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c31ea5edbec71e5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Signal {
  Signal() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf4244bb5449f267, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Header::Reader {
public:
  typedef Header Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDoubles() const;
  inline  ::capnp::List< ::AUSA::protobuf::DoubleSided>::Reader getDoubles() const;

  inline bool hasSingles() const;
  inline  ::capnp::List< ::AUSA::protobuf::SingleSided>::Reader getSingles() const;

  inline bool hasSignals() const;
  inline  ::capnp::List< ::AUSA::protobuf::Signal>::Reader getSignals() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Header::Builder {
public:
  typedef Header Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDoubles();
  inline  ::capnp::List< ::AUSA::protobuf::DoubleSided>::Builder getDoubles();
  inline void setDoubles( ::capnp::List< ::AUSA::protobuf::DoubleSided>::Reader value);
  inline  ::capnp::List< ::AUSA::protobuf::DoubleSided>::Builder initDoubles(unsigned int size);
  inline void adoptDoubles(::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleSided>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleSided>> disownDoubles();

  inline bool hasSingles();
  inline  ::capnp::List< ::AUSA::protobuf::SingleSided>::Builder getSingles();
  inline void setSingles( ::capnp::List< ::AUSA::protobuf::SingleSided>::Reader value);
  inline  ::capnp::List< ::AUSA::protobuf::SingleSided>::Builder initSingles(unsigned int size);
  inline void adoptSingles(::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleSided>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleSided>> disownSingles();

  inline bool hasSignals();
  inline  ::capnp::List< ::AUSA::protobuf::Signal>::Builder getSignals();
  inline void setSignals( ::capnp::List< ::AUSA::protobuf::Signal>::Reader value);
  inline  ::capnp::List< ::AUSA::protobuf::Signal>::Builder initSignals(unsigned int size);
  inline void adoptSignals(::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::Signal>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::Signal>> disownSignals();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Header::Pipeline {
public:
  typedef Header Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DoubleSided::Reader {
public:
  typedef DoubleSided Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint16_t getFrontStrips() const;

  inline  ::uint16_t getBackStrips() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DoubleSided::Builder {
public:
  typedef DoubleSided Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint16_t getFrontStrips();
  inline void setFrontStrips( ::uint16_t value);

  inline  ::uint16_t getBackStrips();
  inline void setBackStrips( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DoubleSided::Pipeline {
public:
  typedef DoubleSided Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SingleSided::Reader {
public:
  typedef SingleSided Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint16_t getStrips() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SingleSided::Builder {
public:
  typedef SingleSided Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint16_t getStrips();
  inline void setStrips( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SingleSided::Pipeline {
public:
  typedef SingleSided Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Signal::Reader {
public:
  typedef Signal Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Signal::Builder {
public:
  typedef Signal Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Signal::Pipeline {
public:
  typedef Signal Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Header::Reader::hasDoubles() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Header::Builder::hasDoubles() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::AUSA::protobuf::DoubleSided>::Reader Header::Reader::getDoubles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleSided>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::AUSA::protobuf::DoubleSided>::Builder Header::Builder::getDoubles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleSided>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Header::Builder::setDoubles( ::capnp::List< ::AUSA::protobuf::DoubleSided>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleSided>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::AUSA::protobuf::DoubleSided>::Builder Header::Builder::initDoubles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleSided>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Header::Builder::adoptDoubles(
    ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleSided>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleSided>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleSided>> Header::Builder::disownDoubles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleSided>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Header::Reader::hasSingles() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Header::Builder::hasSingles() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::AUSA::protobuf::SingleSided>::Reader Header::Reader::getSingles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleSided>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::AUSA::protobuf::SingleSided>::Builder Header::Builder::getSingles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleSided>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Header::Builder::setSingles( ::capnp::List< ::AUSA::protobuf::SingleSided>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleSided>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::AUSA::protobuf::SingleSided>::Builder Header::Builder::initSingles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleSided>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Header::Builder::adoptSingles(
    ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleSided>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleSided>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleSided>> Header::Builder::disownSingles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleSided>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Header::Reader::hasSignals() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Header::Builder::hasSignals() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::AUSA::protobuf::Signal>::Reader Header::Reader::getSignals() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::Signal>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::AUSA::protobuf::Signal>::Builder Header::Builder::getSignals() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::Signal>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Header::Builder::setSignals( ::capnp::List< ::AUSA::protobuf::Signal>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::Signal>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::AUSA::protobuf::Signal>::Builder Header::Builder::initSignals(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::Signal>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Header::Builder::adoptSignals(
    ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::Signal>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::Signal>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::Signal>> Header::Builder::disownSignals() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::Signal>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool DoubleSided::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DoubleSided::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DoubleSided::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DoubleSided::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DoubleSided::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DoubleSided::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DoubleSided::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DoubleSided::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint16_t DoubleSided::Reader::getFrontStrips() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t DoubleSided::Builder::getFrontStrips() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void DoubleSided::Builder::setFrontStrips( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DoubleSided::Reader::getBackStrips() const {
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t DoubleSided::Builder::getBackStrips() {
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void DoubleSided::Builder::setBackStrips( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool SingleSided::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SingleSided::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SingleSided::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SingleSided::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SingleSided::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SingleSided::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SingleSided::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SingleSided::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint16_t SingleSided::Reader::getStrips() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t SingleSided::Builder::getStrips() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SingleSided::Builder::setStrips( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Signal::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Signal::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Signal::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Signal::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Signal::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Signal::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Signal::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Signal::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_dcd603dc2a8c780f_
