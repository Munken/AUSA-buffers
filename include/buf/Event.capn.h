// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Event.capn

#ifndef CAPNP_INCLUDED_9545a511f1c2da1a_
#define CAPNP_INCLUDED_9545a511f1c2da1a_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e71af3616e442894);
CAPNP_DECLARE_SCHEMA(9d867ff469f0057a);
CAPNP_DECLARE_SCHEMA(abc0b5a169e84d9e);
CAPNP_DECLARE_SCHEMA(d1cf039ad7ef32a1);

}  // namespace schemas
}  // namespace capnp

namespace AUSA {
namespace protobuf {

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e71af3616e442894, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DoubleOutput {
  DoubleOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d867ff469f0057a, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SingleOutput {
  SingleOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(abc0b5a169e84d9e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct SignalOutput {
  SignalOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1cf039ad7ef32a1, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDoubleOutput() const;
  inline  ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Reader getDoubleOutput() const;

  inline bool hasSingleOutput() const;
  inline  ::capnp::List< ::AUSA::protobuf::SingleOutput>::Reader getSingleOutput() const;

  inline bool hasSignalOutput() const;
  inline  ::capnp::List< ::AUSA::protobuf::SignalOutput>::Reader getSignalOutput() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDoubleOutput();
  inline  ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Builder getDoubleOutput();
  inline void setDoubleOutput( ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Reader value);
  inline  ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Builder initDoubleOutput(unsigned int size);
  inline void adoptDoubleOutput(::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleOutput>> disownDoubleOutput();

  inline bool hasSingleOutput();
  inline  ::capnp::List< ::AUSA::protobuf::SingleOutput>::Builder getSingleOutput();
  inline void setSingleOutput( ::capnp::List< ::AUSA::protobuf::SingleOutput>::Reader value);
  inline  ::capnp::List< ::AUSA::protobuf::SingleOutput>::Builder initSingleOutput(unsigned int size);
  inline void adoptSingleOutput(::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleOutput>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleOutput>> disownSingleOutput();

  inline bool hasSignalOutput();
  inline  ::capnp::List< ::AUSA::protobuf::SignalOutput>::Builder getSignalOutput();
  inline void setSignalOutput( ::capnp::List< ::AUSA::protobuf::SignalOutput>::Reader value);
  inline  ::capnp::List< ::AUSA::protobuf::SignalOutput>::Builder initSignalOutput(unsigned int size);
  inline void adoptSignalOutput(::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SignalOutput>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SignalOutput>> disownSignalOutput();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DoubleOutput::Reader {
public:
  typedef DoubleOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasFront() const;
  inline  ::AUSA::protobuf::SingleOutput::Reader getFront() const;

  inline bool hasBack() const;
  inline  ::AUSA::protobuf::SingleOutput::Reader getBack() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DoubleOutput::Builder {
public:
  typedef DoubleOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFront();
  inline  ::AUSA::protobuf::SingleOutput::Builder getFront();
  inline void setFront( ::AUSA::protobuf::SingleOutput::Reader value);
  inline  ::AUSA::protobuf::SingleOutput::Builder initFront();
  inline void adoptFront(::capnp::Orphan< ::AUSA::protobuf::SingleOutput>&& value);
  inline ::capnp::Orphan< ::AUSA::protobuf::SingleOutput> disownFront();

  inline bool hasBack();
  inline  ::AUSA::protobuf::SingleOutput::Builder getBack();
  inline void setBack( ::AUSA::protobuf::SingleOutput::Reader value);
  inline  ::AUSA::protobuf::SingleOutput::Builder initBack();
  inline void adoptBack(::capnp::Orphan< ::AUSA::protobuf::SingleOutput>&& value);
  inline ::capnp::Orphan< ::AUSA::protobuf::SingleOutput> disownBack();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DoubleOutput::Pipeline {
public:
  typedef DoubleOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::AUSA::protobuf::SingleOutput::Pipeline getFront();
  inline  ::AUSA::protobuf::SingleOutput::Pipeline getBack();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SingleOutput::Reader {
public:
  typedef SingleOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getMul() const;

  inline bool hasStrip() const;
  inline  ::capnp::List< ::uint8_t>::Reader getStrip() const;

  inline bool hasEnergy() const;
  inline  ::capnp::List<double>::Reader getEnergy() const;

  inline bool hasTdc() const;
  inline  ::capnp::List< ::uint16_t>::Reader getTdc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SingleOutput::Builder {
public:
  typedef SingleOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getMul();
  inline void setMul( ::uint8_t value);

  inline bool hasStrip();
  inline  ::capnp::List< ::uint8_t>::Builder getStrip();
  inline void setStrip( ::capnp::List< ::uint8_t>::Reader value);
  inline void setStrip(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initStrip(unsigned int size);
  inline void adoptStrip(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownStrip();

  inline bool hasEnergy();
  inline  ::capnp::List<double>::Builder getEnergy();
  inline void setEnergy( ::capnp::List<double>::Reader value);
  inline void setEnergy(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initEnergy(unsigned int size);
  inline void adoptEnergy(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownEnergy();

  inline bool hasTdc();
  inline  ::capnp::List< ::uint16_t>::Builder getTdc();
  inline void setTdc( ::capnp::List< ::uint16_t>::Reader value);
  inline void setTdc(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t>::Builder initTdc(unsigned int size);
  inline void adoptTdc(::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> disownTdc();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SingleOutput::Pipeline {
public:
  typedef SingleOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SignalOutput::Reader {
public:
  typedef SignalOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SignalOutput::Builder {
public:
  typedef SignalOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getValue();
  inline void setValue( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SignalOutput::Pipeline {
public:
  typedef SignalOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Event::Reader::hasDoubleOutput() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasDoubleOutput() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Reader Event::Reader::getDoubleOutput() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Builder Event::Builder::getDoubleOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Builder::setDoubleOutput( ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::AUSA::protobuf::DoubleOutput>::Builder Event::Builder::initDoubleOutput(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptDoubleOutput(
    ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::DoubleOutput>> Event::Builder::disownDoubleOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::DoubleOutput>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Reader::hasSingleOutput() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSingleOutput() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::AUSA::protobuf::SingleOutput>::Reader Event::Reader::getSingleOutput() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleOutput>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::AUSA::protobuf::SingleOutput>::Builder Event::Builder::getSingleOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleOutput>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Event::Builder::setSingleOutput( ::capnp::List< ::AUSA::protobuf::SingleOutput>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleOutput>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::AUSA::protobuf::SingleOutput>::Builder Event::Builder::initSingleOutput(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleOutput>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSingleOutput(
    ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleOutput>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleOutput>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SingleOutput>> Event::Builder::disownSingleOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SingleOutput>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Event::Reader::hasSignalOutput() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasSignalOutput() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::AUSA::protobuf::SignalOutput>::Reader Event::Reader::getSignalOutput() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SignalOutput>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::AUSA::protobuf::SignalOutput>::Builder Event::Builder::getSignalOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SignalOutput>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Event::Builder::setSignalOutput( ::capnp::List< ::AUSA::protobuf::SignalOutput>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SignalOutput>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::AUSA::protobuf::SignalOutput>::Builder Event::Builder::initSignalOutput(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SignalOutput>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptSignalOutput(
    ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SignalOutput>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SignalOutput>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::AUSA::protobuf::SignalOutput>> Event::Builder::disownSignalOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::AUSA::protobuf::SignalOutput>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool DoubleOutput::Reader::hasFront() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DoubleOutput::Builder::hasFront() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::AUSA::protobuf::SingleOutput::Reader DoubleOutput::Reader::getFront() const {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::AUSA::protobuf::SingleOutput::Builder DoubleOutput::Builder::getFront() {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::AUSA::protobuf::SingleOutput::Pipeline DoubleOutput::Pipeline::getFront() {
  return  ::AUSA::protobuf::SingleOutput::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DoubleOutput::Builder::setFront( ::AUSA::protobuf::SingleOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::AUSA::protobuf::SingleOutput::Builder DoubleOutput::Builder::initFront() {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DoubleOutput::Builder::adoptFront(
    ::capnp::Orphan< ::AUSA::protobuf::SingleOutput>&& value) {
  ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AUSA::protobuf::SingleOutput> DoubleOutput::Builder::disownFront() {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DoubleOutput::Reader::hasBack() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DoubleOutput::Builder::hasBack() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::AUSA::protobuf::SingleOutput::Reader DoubleOutput::Reader::getBack() const {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::AUSA::protobuf::SingleOutput::Builder DoubleOutput::Builder::getBack() {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::AUSA::protobuf::SingleOutput::Pipeline DoubleOutput::Pipeline::getBack() {
  return  ::AUSA::protobuf::SingleOutput::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DoubleOutput::Builder::setBack( ::AUSA::protobuf::SingleOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::AUSA::protobuf::SingleOutput::Builder DoubleOutput::Builder::initBack() {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DoubleOutput::Builder::adoptBack(
    ::capnp::Orphan< ::AUSA::protobuf::SingleOutput>&& value) {
  ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AUSA::protobuf::SingleOutput> DoubleOutput::Builder::disownBack() {
  return ::capnp::_::PointerHelpers< ::AUSA::protobuf::SingleOutput>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint8_t SingleOutput::Reader::getMul() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t SingleOutput::Builder::getMul() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SingleOutput::Builder::setMul( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool SingleOutput::Reader::hasStrip() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SingleOutput::Builder::hasStrip() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t>::Reader SingleOutput::Reader::getStrip() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t>::Builder SingleOutput::Builder::getStrip() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SingleOutput::Builder::setStrip( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void SingleOutput::Builder::setStrip(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t>::Builder SingleOutput::Builder::initStrip(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SingleOutput::Builder::adoptStrip(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> SingleOutput::Builder::disownStrip() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SingleOutput::Reader::hasEnergy() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool SingleOutput::Builder::hasEnergy() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader SingleOutput::Reader::getEnergy() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder SingleOutput::Builder::getEnergy() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void SingleOutput::Builder::setEnergy( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void SingleOutput::Builder::setEnergy(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder SingleOutput::Builder::initEnergy(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void SingleOutput::Builder::adoptEnergy(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> SingleOutput::Builder::disownEnergy() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool SingleOutput::Reader::hasTdc() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool SingleOutput::Builder::hasTdc() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t>::Reader SingleOutput::Reader::getTdc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t>::Builder SingleOutput::Builder::getTdc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void SingleOutput::Builder::setTdc( ::capnp::List< ::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void SingleOutput::Builder::setTdc(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t>::Builder SingleOutput::Builder::initTdc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void SingleOutput::Builder::adoptTdc(
    ::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> SingleOutput::Builder::disownTdc() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint16_t SignalOutput::Reader::getValue() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t SignalOutput::Builder::getValue() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void SignalOutput::Builder::setValue( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_9545a511f1c2da1a_
